<!doctype html>
{%- capture dir -%}
	{%- case request.locale.iso_code -%}
	  {%- when 'ae' or 'ar' or 'arc' or 'bcc' or 'bqi' or 'ckb' or 'dv' or 'fa' or 'glk' or 'ha' or 'he' or 'kwh' or 'ks' or 'ku' or 'mzn' or 'nqo' or 'pnb' or 'ps' or 'sd' or 'ug' or 'ur' or 'yi' -%}
	    rtl
	  {%- else -%}
	    ltr
	{%- endcase -%}
{%- endcapture -%}
<html class="no-js" lang="{{ request.locale.iso_code }}" dir="{{ dir }}">
<head>
	<script>
		(function() {
			const SCRIPT_PATTERNS = [
			  'shopify',
			  'trekkie',
			  'storefront',
			  'tricorder',
			  'webpixelsmanager',
			  'checkout-web',
			  'shop_events_listener',
			  'customer_area',
			  'option_selection',
			  'api.jquery',
			  'productreviews',
			  'spr',
			  'theme.js',
			  'vendor.js',
			  'preloads.js',
			  'b36000b3ew23d1e6a6p45ab3e8bm574dc08dm',
			  'googletagmanager',
			  'ChatV1'
			];
		  
			function shouldDeferScript(src) {
			  return SCRIPT_PATTERNS.some(pattern => src.toLowerCase().includes(pattern));
			}
		  
			function deferScript(scriptElement) {
			  const src = scriptElement.getAttribute('src');
			  if (src && shouldDeferScript(src)) {
				scriptElement.removeAttribute('async');
				scriptElement.setAttribute('defer', '');
			  }
			}
		  
			function deferPreload(linkElement) {
			  const href = linkElement.getAttribute('href');
			  if (href && (href.toLowerCase().includes('tone') || href.toLowerCase().includes('boomerang'))) {
				linkElement.setAttribute('rel', 'defer');
			  }
			}
		  
			function handleShopifyAudio(audioElement) {
			  if (audioElement.src.includes('incoming-message-tone.mp3')) {
				const audioSrc = audioElement.src;
				const audioParent = audioElement.parentNode;
				audioElement.remove();
		  
				// Create a custom audio player
				const customAudio = {
				  audio: null,
				  play: function() {
					if (!this.audio) {
					  this.audio = new Audio(audioSrc);
					}
					this.audio.play();
				  }
				};
		  
				// Override the global Audio constructor for this specific file
				const OriginalAudio = window.Audio;
				window.Audio = function(src) {
				  if (src === audioSrc) {
					return customAudio;
				  }
				  return new OriginalAudio(src);
				};
		  
				// Create a MutationObserver to watch for the chat widget
				const observer = new MutationObserver((mutations) => {
				  mutations.forEach((mutation) => {
					if (mutation.addedNodes.length) {
					  const chatWidget = document.querySelector('[data-chat-widget]');
					  if (chatWidget) {
						observer.disconnect();
						chatWidget.addEventListener('click', () => {
						  customAudio.play();
						});
					  }
					}
				  });
				});
			  }
			}
		  
			// Process existing script tags
			document.querySelectorAll('script[src]').forEach(deferScript);
		  
			// Process existing preload links
			document.querySelectorAll('link[rel="preload"]').forEach(deferPreload);
		  
			// Process existing audio elements
			document.querySelectorAll('audio').forEach(handleShopifyAudio);
		  
			// Watch for new script tags, preload links, and audio elements
			const observer = new MutationObserver((mutations) => {
			  mutations.forEach((mutation) => {
				mutation.addedNodes.forEach((node) => {
				  if (node.nodeType === Node.ELEMENT_NODE) {
					if (node.tagName === 'SCRIPT') {
					  deferScript(node);
					} else if (node.tagName === 'LINK' && node.getAttribute('rel') === 'preload') {
					  deferPreload(node);
					} else if (node.tagName === 'AUDIO') {
					  handleShopifyAudio(node);
					}
				  }
				});
			  });
			});
		  
			observer.observe(document.documentElement, {
			  childList: true,
			  subtree: true
			});
		  })();

		  (function() {
			// Function to remove Boomerang script
			function removeBoomerangScript() {
			  const boomerangScript = document.getElementById('boomr-if-as');
			  if (boomerangScript) {
				boomerangScript.remove();
				console.log('Removed Boomerang script');
			  }
			}
		  
			// Remove existing Boomerang script
			removeBoomerangScript();
		  
			// Prevent Boomerang script from loading
			Object.defineProperty(window, 'BOOMR', {
			  value: {
				version: '1.0.0',
				add: function() {},
				addVar: function() {},
				init: function() {},
				subscribe: function() {},
				sendBeacon: function() {},
				// Add any other methods that might be called
			  },
			  writable: false,
			  configurable: false
			});
		  
			// Override appendChild to prevent Boomerang script insertion
			const originalAppendChild = Element.prototype.appendChild;
			Element.prototype.appendChild = function(child) {
			  if (child.id === 'boomr-if-as' || (child.src && child.src.includes('boomerang'))) {
				console.log('Blocked Boomerang script insertion');
				return child; // Return the child without actually appending it
			  }
			  return originalAppendChild.call(this, child);
			};
		  
			// Override insertBefore to prevent Boomerang script insertion
			const originalInsertBefore = Element.prototype.insertBefore;
			Element.prototype.insertBefore = function(newNode, referenceNode) {
			  if (newNode.id === 'boomr-if-as' || (newNode.src && newNode.src.includes('boomerang'))) {
				console.log('Blocked Boomerang script insertion');
				return newNode; // Return the newNode without actually inserting it
			  }
			  return originalInsertBefore.call(this, newNode, referenceNode);
			};
		  })();
	  </script>
	  
  <meta charset="utf-8">
  <meta name="referrer" content="strict-origin-when-cross-origin">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5, viewport-fit=cover">
  <meta name="theme-color" content="{{ settings.color_body_bg }}">
  <meta name="keywords" content="afghan rugs, hand knotted rugs, wool rugs">
  {{ 'app.css' | asset_url | stylesheet_tag: preload: true}}
  <link rel="canonical" href="{{ canonical_url }}">
  <link rel="preconnect" href="https://cdn.shopify.com" crossorigin>
  {%- if settings.favicon != blank -%}
    <link rel="icon" type="image/png" href="{{ settings.favicon | image_url: width: 32, height: 32 }}">
  {%- endif -%}
  {%- unless settings.heading_font.system? and settings.body_font.system? -%}
    <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
  {%- endunless -%}

  <title>
    {{ page_title }}{% if current_tags %}{% assign meta_tags = current_tags | join: ', ' %} - {{ 'general.meta.tags' | t: tags: meta_tags }}{% endif %}{% if current_page != 1 %} - Page {{ current_page }}{% else %}{% unless page_title contains shop.name or page_title contains ' x ' %} | {{ shop.name }}{% endunless %}{% endif %}
  </title>

  {% if page_description %}
    <meta name="description" content="{{ page_description | escape }}">
  {% endif %}

  {%- if request.path == '/collections/vendors' or request.path == '/collections/all' -%}
    <meta name="robots" content="noindex nofollow">
  {%- endif -%}

  {% render 'head-preload' %}
  {% render 'social-meta-tags' %}
  {% render 'head-variables' %}

  <script>
    window.theme = window.theme || {};
    theme = {
      settings: {
        money_with_currency_format: {{- shop.money_format | json -}},
        cart_drawer: {{- settings.cart_drawer -}}
      },
      routes: {
        root_url: '{{ routes.root_url }}',
        cart_url: '{{ routes.cart_url }}',
        cart_add_url: '{{ routes.cart_add_url }}',
        search_url: '{{ routes.search_url }}',
        collections_url: '{{ routes.collections_url }}',
        cart_change_url: '{{ routes.cart_change_url }}',
        cart_update_url: '{{ routes.cart_update_url }}',
        predictive_search_url: '{{ routes.predictive_search_url }}',
      },
      variantStrings: {
        addToCart: `{{ 'products.product.add_to_cart' | t }}`,
        soldOut: `{{ 'products.product.sold_out' | t }}`,
        unavailable: `{{ 'products.product.unavailable' | t }}`,
        preOrder: `{{ 'products.product.pre_order' | t }}`,
      },
      strings: {
        requiresTerms: `{{ 'sections.cart.terms_confirm' | t }}`,
        shippingEstimatorNoResults: `{{ 'sections.cart.shipping_estimator.no_results' | t }}`,
        shippingEstimatorOneResult: `{{ 'sections.cart.shipping_estimator.one_result' | t }}`,
        shippingEstimatorMultipleResults: `{{ 'sections.cart.shipping_estimator.multiple_results' | t }}`,
        shippingEstimatorError: `{{ 'sections.cart.shipping_estimator.error' | t }}`
      }
    };
  </script>

  {{ content_for_header }} <!-- Header hook for plugins -->
  <script>document.documentElement.className = document.documentElement.className.replace('no-js', 'js');</script>
</head>
<body class="button-uppercase-{{ settings.button_uppercase }} navigation-uppercase-{{ settings.navigation_uppercase }} product-title-uppercase-{{ settings.product_title_uppercase }} {% if customer %} customer-logged-in{% endif %} template-{{ template | replace: '.', ' ' | truncatewords: 1, '' | handle }} template-{{ template | replace: '.', '-' | handle }}">
<a class="screen-reader-shortcut" href="#main-content">{{ 'accessibility.skip_to_text' | t }}</a>
  <div id="wrapper">
    {% sections 'header-group' %}
    <div role="main" id="main-content">
      {{ content_for_layout }}
    </div>
    {% sections 'footer-group' %}
    {% render 'cart-drawer' %}
    {% render 'product-drawer' %}
    {% render 'back-to-top' %}
    <div class="click-capture"></div>
  </div>
  <script src="{{ 'vendor-flickity-pkgd.min.js' | asset_url }}" defer></script>
  <script src="{{ 'app.js' | asset_url }}" defer></script>
  <script src="{{ 'product.js' | asset_url }}" defer></script>
  <script src="{{ 'slideshow.js' | asset_url }}" defer></script>  
  <script src="{{ 'scroll-shadow.js' | asset_url }}" defer></script>
  <script src="{{ 'predictive-search.js' | asset_url }}" defer></script>
  {%- if settings.free_shipping -%}
    <script src="{{ 'free-shipping.js' | asset_url }}" defer></script>
    {{ 'free-shipping.css' | asset_url | stylesheet_tag: defer: true }}
  {%- endif -%}
  <script src="{{ 'back-to-top.js' | asset_url }}" defer></script>
<script>
  function initSlideshow() {
    if (typeof Flickity === 'undefined') {
      setTimeout(initSlideshow, 50);
      return;
    }
    
    window.dispatchEvent(new Event('flickity:available'));
    
    var slideshows = document.querySelectorAll('product-slider, slide-show');
    slideshows.forEach(function(slideshow) {
      if (!slideshow.dataset.initiated) {
        slideshow.initWhenFlickityAvailable();
      }
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSlideshow);
  } else {
    initSlideshow();
  }
</script>
</body>
</html>
